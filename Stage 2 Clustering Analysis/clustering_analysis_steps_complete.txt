
Clustering Analysis Execution Steps

1. Load the preprocessed dataset:
   ```python
   data_encoded = pd.read_csv('preprocessed_dataset.csv')
   ```

2. Select relevant features:
   ```python
   required_features = [
       'tenure', 'MonthlyCharges',
       'InternetService_Fiber optic', 'PhoneService_Yes', 'MultipleLines_Yes',
       'Contract_Two year', 'gender_Male', 'Dependents_Yes', 'Churn_Yes'
   ]
   data_selected = data_encoded[required_features]
   ```

3. Create new features:
   ```python
   data_selected['TenureGroup'] = pd.cut(
       data_selected['tenure'],
       bins=[0, 12, 24, 48, 72, 1000],
       labels=['0-1yr', '1-2yrs', '2-4yrs', '4-6yrs', '6+yrs']
   )
   data_selected['MonthlyChargesBin'] = pd.cut(
       data_selected['MonthlyCharges'],
       bins=[0, 30, 60, 90, 120],
       labels=['Low', 'Medium', 'High', 'Very High']
   )
   ```

4. Standardize the numerical features:
   ```python
   from sklearn.preprocessing import StandardScaler
   features_to_scale = ['tenure', 'MonthlyCharges']
   scaler = StandardScaler()
   data_selected[features_to_scale] = scaler.fit_transform(data_selected[features_to_scale])
   ```

5. Encode categorical features:
   ```python
   data_encoded_stage2 = pd.get_dummies(data_selected, columns=['TenureGroup', 'MonthlyChargesBin'], drop_first=True)
   features_stage2 = data_encoded_stage2.drop(columns=['Churn_Yes'])
   ```

6. Determine the optimal number of clusters using the elbow method:
   ```python
   sample_data_stage2 = features_stage2.sample(frac=0.1, random_state=42)
   wcss_stage2 = []
   for i in range(1, 11):
       kmeans_stage2 = KMeans(n_clusters=i, init='k-means++', random_state=42)
       kmeans_stage2.fit(sample_data_stage2)
       wcss_stage2.append(kmeans_stage2.inertia_)
   plt.plot(range(1, 11), wcss_stage2, marker='o', linestyle='--')
   plt.xlabel('Number of Clusters')
   plt.ylabel('WCSS')
   plt.show()
   ```

7. Train the K-Means model with the optimal number of clusters:
   ```python
   optimal_clusters = 4
   kmeans_stage2 = KMeans(n_clusters=optimal_clusters, init='k-means++', random_state=42)
   kmeans_stage2.fit(features_stage2)
   data_encoded_stage2['Cluster'] = kmeans_stage2.labels_
   ```

8. Visualize the clusters:
   ```python
   plt.scatter(data_encoded_stage2['MonthlyCharges'], data_encoded_stage2['tenure'], c=data_encoded_stage2['Cluster'], cmap='viridis')
   plt.xlabel('MonthlyCharges')
   plt.ylabel('tenure')
   plt.title('Clusters of Customers')
   plt.show()
   ```

9. Save the dataset with cluster labels:
   ```python
   data_encoded_stage2.to_csv('preprocessed_dataset_stage2_with_clusters.csv', index=False)
   ```
